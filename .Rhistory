paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],
"/velocimeter/extdata/agri-short_00000.aviResults.txt"),
min.size = 10,min.circularity = 0.05,fps = 130,tubelength = 1.075)
devtools::document()
library(velocimeter)
setwd("C:\\Users\\Jinlei\\Dropbox\\20211031MEE_resubmission\\3dfallingseed")
library(velocimeter)
res <- calculate.terminal.velocity.phys(file =
paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],
"/velocimeter/extdata/agri-short_00000.aviResults.txt"),
min.size = 10,min.circularity = 0.05,fps = 130,tubelength = 1.075)
library(rgl)
plot3d(x=res$imagedat$x,y = res$imagedat$z,z = res$imagedat$y,
xlab = "x (cm)",zlab = "Falling distance (cm)",ylab = "y (cm)",
type = "s",
radius = .2,
xlim = c(14,15),ylim = c(10,15))
# save 3d plot
# https://r-graphics.org/recipe-miscgraph-3d-save
rgl.snapshot('agri3d.png', fmt = 'png')
# You can also use rgl.postscript() to save a PostScript or PDF file:
rgl.postscript('agri3dplot.pdf', fmt = 'pdf')
rgl.postscript('agri3dplot.ps', fmt = 'ps')
rgl.snapshot('agri3d.png', fmt = 'png')
# You can also use rgl.postscript() to save a PostScript or PDF file:
rgl.postscript('agri3dplot.pdf', fmt = 'pdf')
rgl.postscript('agri3dplot.ps', fmt = 'ps')
calculate.terminal.velocity.phys
devtools::document()
library(velocimeter)
devtools::document()
library(velocimeter)
devtools::document()
devtools::build()
devtools::check()
library(velocimeter)
load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"),)
absdiff.veloc(obj = vtobj)
load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
absdiff.veloc(obj = vtobj)
paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata")
head(vtobj)
absdiff.veloc(obj = vtobj[[1]])
devtools::document()
devtools::build()
devtools::check()
library(velocimeter)
devtools::document()
devtools::build()
#'
#' @param obj The R object "vtobj.Rdata" produced by the script to calculate terminal velocity from .txt files
#'
#' @return Result summary of the RMSE of differences between observed and predicted velocity between successive images
#' @export
#'
#' @examples
#' library(velocimeter)
#' load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
#' rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
}
rmse.veloc <- function(obj) {
summary(sqrt((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100)/diff(obj$imagedat$t))^2))
}
load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
summary(sqrt(((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2))
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
devtools::document()
rm(list = c("rmse.veloc"))
devtools::document()
devtools::build()
devtools::check()
library(velocimeter)
rmse.veloc(obj = vtobj[[1]])
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
summary(sqrt((fitted(obj$physfit)-diff(obj$imagedat$z/100)/diff(obj$imagedat$t))^2))
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
# test
obj  <-  vtobj[[1]]
obj$imagedat$z
obj$imagedat$t
fitted(obj$physfit)
diff(obj$imagedat$z/100)
diff(fitted(obj$physfit))
rmse.veloc <- function(obj) {
summary(sqrt(((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2))
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
#'
#' @param obj The R object "vtobj.Rdata" produced by the script to calculate terminal velocity from .txt files
#'
#' @return Result summary of the RMSE of differences between observed and predicted velocity between successive images
#' @export
#'
#' @examples
#' library(velocimeter)
#' load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
#' rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
summary(sqrt(mean((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2))
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
sqrt(mean((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2)
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
# sqrt(mean((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2)
sqrt(mean((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t)^2))
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
rmse.veloc <- function(obj) {
# sqrt(mean((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2)
sqrt(mean(((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2))
}
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
# test
obj  <-  vtobj[[1]]
diff(fitted(obj$physfit))
(diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t)
((diff(fitted(obj$physfit))-diff(obj$imagedat$z/100))/diff(obj$imagedat$t))^2
absdiff.veloc(obj = vtobj[[1]])
rmse.veloc(obj = vtobj[[1]])
devtools::document()
rm(list = c("rmse.veloc"))
devtools::document()
devtools::build()
devtools::check()
library(velocimeter)
system.file(package = "velocimeter")
system.file()
xcalib <- function(dat){
xcalib <- lm(x~ym*xd,data = dat)
return(summary(xcalib))
}
datx <- read.csv(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/datx.csv"),header = T)
devtools::document()
rm(list = c("xcalib"))
devtools::document()
devtools::build()
devtools::check()
devtools::check()
paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/datx.csv"
)
datx <- read.csv(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/datx.csv"),header = TRUE)
paste0(system.file(package = "velocimeter"),"/extdata/datx.csv")
datx <- read.csv(file = paste0(system.file(package = "velocimeter"),"/extdata/datx.csv"),header = TRUE)
devtools::check()
traceback()
devtools::document()
devtools::build()
devtools::check()
datx <- read.csv(file = paste0(system.file(package = "velocimeter"),"/extdata/datx.csv"),header = TRUE)
head(datx)
paste0(system.file(package = "velocimeter"),"/extdata/datx.csv")
library(velocimeter)
devtools::document()
devtools::build()
# step 3, run:
devtools::check()
.Last.error.trace
remove.packages("velocimeter")
# step 0, write R functions
# step 1, run:
devtools::document()
# step 2, run:
devtools::build()
# step 3, run:
devtools::check()
devtools::document()
# step 2, run:
devtools::build()
# step 3, run:
devtools::check()
library(velocimeter)
vtobj[[1]]
remove.packages("velocimeter")
# step 0, write R functions
# step 1, run:
devtools::document()
devtools::build()
devtools::check()
.Last.error.trace
# step 2, run:
devtools::build()
# step 3, run:
devtools::check()
library(velocimeter)
# test
load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
obj <- vtobj[[1]]
fitted(obj$physfit)
obj
zcalib
imagedat
# load the conversion functions:
load(paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/calib.Robj"))
fps<-130                # set the temporal resolution - this should normally be fixed at 130 fps
min.size<-10            # minimum size (in pixels) of valid objects
min.circularity<-0.05   # minimum circularity of valid objects
tubelengthdefault<-1.075 # 2.095,1.575,1.075 for long, medium, short tube! - is overwritten if filename contains "short", "medium" or "long" - value here is used for all files that do not contain the info in the file name!
dt<-1/fps #time interval between images
dat<-read.table(file=paste0(system.file(package = "velocimeter"),"/extdata/agri-short_00000.aviResults.txt"),header=T)
dat
# select putative falling objects
dat<-dat[dat$Circ.>=min.circularity,]
dat<-dat[dat$Area>=min.size,]
# further select data based on range limits in the mirror view
dat<-dat[(dat$XM>200)&(dat$XM<800)|(dat$XM>900&dat$XM<1850),]
dat<-dat[dat$YM<1000,]
# select data for direct view
directdat<-dat[dat$XM>900,]
# select data for mirror view
mirrordat<-dat[dat$XM<820,]
# time values in direct and mirror views
directtimevals<-unique(directdat$Slice)
mirrortimevals<-unique(mirrordat$Slice)
timevals<-directtimevals[directtimevals%in%mirrortimevals]
#select the longest sequence of consecutive images
timevals<-sort(timevals)
time.rle<-rle(diff(timevals))
time.rle<-data.frame(length=time.rle$length,values=time.rle$values,period=1:length(time.rle$values))
time.rle$endtime<-1+cumsum(time.rle$length)
startendtimes<-c(1,time.rle$endtime)
time.rle1<-time.rle[time.rle$values==1,]
time.period<-time.rle1$period[which.max(time.rle1$length)]
period.startend<-startendtimes[c(time.period,time.period+1)]
timevals<-timevals[period.startend[1]:period.startend[2]]
if (length(timevals)==0) {
message<-paste(message,"Error: no data from consecutive images",sep="  ")
vtfit<-NULL
vt<-NA
} else {
directdat<-directdat[(directdat$Slice%in%timevals),]
mirrordat<-mirrordat[(mirrordat$Slice%in%timevals),]
#make sure that there is only a single object in each time step (this works because dat was sorted by decreasing Area)
if (max(table(directdat$Slice))>1) message<-paste(message,"Warning: more than one object detected in direct image")
directdat<-directdat[!duplicated(directdat$Slice),]
if (max(table(mirrordat$Slice))>1) message<-paste(message,"Warning: more than one object detected in mirror image")
mirrordat<-mirrordat[!duplicated(mirrordat$Slice),]
# image coordinates of direct view
names(directdat)[2:3]<-c("xd","zd")
# image coordinates of mirror view
names(mirrordat)[2:3]<-c("ym","zm")
imagedat<-merge(directdat,mirrordat,by="Slice",suffixes=c("",".mirror"))
if (any(abs(imagedat$yf-imagedat$ym)>250)) {
message<-paste(message,"Warning: direct and mirror image may not refer to same object",sep="  ")
}
# convert the image coordinates to real coordinates in 3-d space
imagedat$x<-predict(calib$xcalib,imagedat)
imagedat$y<-predict(calib$ycalib,imagedat)
imagedat$z<-predict(calib$zcalib,imagedat)
imagedat$t<-imagedat$Slice*dt
# (traditional) method 1: simple linear regression model
linfit<-lm(z~t,imagedat)
if (summary(linfit)$r.squared<0.999) {
message<-paste(message,"Warning: seed may not yet have reached terminal velocity",sep="  ")
}
vt.lin<- (-coef(linfit)[2]) # in m/s
# method 2: calculate vt with the physical model of free fall with air resistance
# Equation (2.58) from “Classical Mechanics” by John R. Taylor
z.obs<- -(tubelength-imagedat$z)
ts<-imagedat$t
dats <- data.frame(t=ts,z.obs=z.obs)
# fit the physical model for free fall with air resistance:
physfit <- nls(z.obs ~ z0 - vt^2/9.80665 * log(cosh(9.80665*t/vt)),
data=dats,start=list(vt=2,z0=0))
vt.phys <- coef(physfit)[1]
z0.phys <- coef(physfit)[2]
rsq.cond.phys <- (1 - var(residuals(physfit))/var(dats$z.obs))
if (z0.phys > 0.1) {
message<-paste("Warning: Z0 0.1 m or larger",message,sep="  ")
}
}
load(paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/calib.Robj"))
message<-""
dt<-1/fps #time interval between images
dat<-read.table(file=paste0(system.file(package = "velocimeter"),"/extdata/agri-short_00000.aviResults.txt"),header=T)
# select putative falling objects
dat<-dat[dat$Circ.>=min.circularity,]
dat<-dat[dat$Area>=min.size,]
# further select data based on range limits in the mirror view
dat<-dat[(dat$XM>200)&(dat$XM<800)|(dat$XM>900&dat$XM<1850),]
dat<-dat[dat$YM<1000,]
# select data for direct view
directdat<-dat[dat$XM>900,]
# select data for mirror view
mirrordat<-dat[dat$XM<820,]
# time values in direct and mirror views
directtimevals<-unique(directdat$Slice)
mirrortimevals<-unique(mirrordat$Slice)
timevals<-directtimevals[directtimevals%in%mirrortimevals]
#select the longest sequence of consecutive images
timevals<-sort(timevals)
time.rle<-rle(diff(timevals))
time.rle<-data.frame(length=time.rle$length,values=time.rle$values,period=1:length(time.rle$values))
time.rle$endtime<-1+cumsum(time.rle$length)
startendtimes<-c(1,time.rle$endtime)
time.rle1<-time.rle[time.rle$values==1,]
time.period<-time.rle1$period[which.max(time.rle1$length)]
period.startend<-startendtimes[c(time.period,time.period+1)]
timevals<-timevals[period.startend[1]:period.startend[2]]
if (length(timevals)==0) {
message<-paste(message,"Error: no data from consecutive images",sep="  ")
vtfit<-NULL
vt<-NA
} else {
directdat<-directdat[(directdat$Slice%in%timevals),]
mirrordat<-mirrordat[(mirrordat$Slice%in%timevals),]
#make sure that there is only a single object in each time step (this works because dat was sorted by decreasing Area)
if (max(table(directdat$Slice))>1) message<-paste(message,"Warning: more than one object detected in direct image")
directdat<-directdat[!duplicated(directdat$Slice),]
if (max(table(mirrordat$Slice))>1) message<-paste(message,"Warning: more than one object detected in mirror image")
mirrordat<-mirrordat[!duplicated(mirrordat$Slice),]
# image coordinates of direct view
names(directdat)[2:3]<-c("xd","zd")
# image coordinates of mirror view
names(mirrordat)[2:3]<-c("ym","zm")
imagedat<-merge(directdat,mirrordat,by="Slice",suffixes=c("",".mirror"))
if (any(abs(imagedat$yf-imagedat$ym)>250)) {
message<-paste(message,"Warning: direct and mirror image may not refer to same object",sep="  ")
}
# convert the image coordinates to real coordinates in 3-d space
imagedat$x<-predict(calib$xcalib,imagedat)
imagedat$y<-predict(calib$ycalib,imagedat)
imagedat$z<-predict(calib$zcalib,imagedat)
imagedat$t<-imagedat$Slice*dt
# (traditional) method 1: simple linear regression model
linfit<-lm(z~t,imagedat)
if (summary(linfit)$r.squared<0.999) {
message<-paste(message,"Warning: seed may not yet have reached terminal velocity",sep="  ")
}
vt.lin<- (-coef(linfit)[2]) # in m/s
# method 2: calculate vt with the physical model of free fall with air resistance
# Equation (2.58) from “Classical Mechanics” by John R. Taylor
z.obs<- -(tubelength-imagedat$z)
ts<-imagedat$t
dats <- data.frame(t=ts,z.obs=z.obs)
# fit the physical model for free fall with air resistance:
physfit <- nls(z.obs ~ z0 - vt^2/9.80665 * log(cosh(9.80665*t/vt)),
data=dats,start=list(vt=2,z0=0))
vt.phys <- coef(physfit)[1]
z0.phys <- coef(physfit)[2]
rsq.cond.phys <- (1 - var(residuals(physfit))/var(dats$z.obs))
if (z0.phys > 0.1) {
message<-paste("Warning: Z0 0.1 m or larger",message,sep="  ")
}
}
traceback()
fps<-130                # set the temporal resolution - this should normally be fixed at 130 fps
min.size<-10            # minimum size (in pixels) of valid objects
min.circularity<-0.05   # minimum circularity of valid objects
tubelength<-1.075 # 2.095,1.575,1.075 for long, medium, short tube! - is overwritten if filename contains "short", "medium" or "long" - value here is used for all files that do not contain the info in the file name!
load(paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/calib.Robj"))
message<-""
dt<-1/fps #time interval between images
dat<-read.table(file=paste0(system.file(package = "velocimeter"),"/extdata/agri-short_00000.aviResults.txt"),header=T)
# select putative falling objects
dat<-dat[dat$Circ.>=min.circularity,]
dat<-dat[dat$Area>=min.size,]
# further select data based on range limits in the mirror view
dat<-dat[(dat$XM>200)&(dat$XM<800)|(dat$XM>900&dat$XM<1850),]
dat<-dat[dat$YM<1000,]
# select data for direct view
directdat<-dat[dat$XM>900,]
# select data for mirror view
mirrordat<-dat[dat$XM<820,]
# time values in direct and mirror views
directtimevals<-unique(directdat$Slice)
mirrortimevals<-unique(mirrordat$Slice)
timevals<-directtimevals[directtimevals%in%mirrortimevals]
#select the longest sequence of consecutive images
timevals<-sort(timevals)
time.rle<-rle(diff(timevals))
time.rle<-data.frame(length=time.rle$length,values=time.rle$values,period=1:length(time.rle$values))
time.rle$endtime<-1+cumsum(time.rle$length)
startendtimes<-c(1,time.rle$endtime)
time.rle1<-time.rle[time.rle$values==1,]
time.period<-time.rle1$period[which.max(time.rle1$length)]
period.startend<-startendtimes[c(time.period,time.period+1)]
timevals<-timevals[period.startend[1]:period.startend[2]]
if (length(timevals)==0) {
message<-paste(message,"Error: no data from consecutive images",sep="  ")
vtfit<-NULL
vt<-NA
} else {
directdat<-directdat[(directdat$Slice%in%timevals),]
mirrordat<-mirrordat[(mirrordat$Slice%in%timevals),]
#make sure that there is only a single object in each time step (this works because dat was sorted by decreasing Area)
if (max(table(directdat$Slice))>1) message<-paste(message,"Warning: more than one object detected in direct image")
directdat<-directdat[!duplicated(directdat$Slice),]
if (max(table(mirrordat$Slice))>1) message<-paste(message,"Warning: more than one object detected in mirror image")
mirrordat<-mirrordat[!duplicated(mirrordat$Slice),]
# image coordinates of direct view
names(directdat)[2:3]<-c("xd","zd")
# image coordinates of mirror view
names(mirrordat)[2:3]<-c("ym","zm")
imagedat<-merge(directdat,mirrordat,by="Slice",suffixes=c("",".mirror"))
if (any(abs(imagedat$yf-imagedat$ym)>250)) {
message<-paste(message,"Warning: direct and mirror image may not refer to same object",sep="  ")
}
# convert the image coordinates to real coordinates in 3-d space
imagedat$x<-predict(calib$xcalib,imagedat)
imagedat$y<-predict(calib$ycalib,imagedat)
imagedat$z<-predict(calib$zcalib,imagedat)
imagedat$t<-imagedat$Slice*dt
# (traditional) method 1: simple linear regression model
linfit<-lm(z~t,imagedat)
if (summary(linfit)$r.squared<0.999) {
message<-paste(message,"Warning: seed may not yet have reached terminal velocity",sep="  ")
}
vt.lin<- (-coef(linfit)[2]) # in m/s
# method 2: calculate vt with the physical model of free fall with air resistance
# Equation (2.58) from “Classical Mechanics” by John R. Taylor
z.obs<- -(tubelength-imagedat$z)
ts<-imagedat$t
dats <- data.frame(t=ts,z.obs=z.obs)
# fit the physical model for free fall with air resistance:
physfit <- nls(z.obs ~ z0 - vt^2/9.80665 * log(cosh(9.80665*t/vt)),
data=dats,start=list(vt=2,z0=0))
vt.phys <- coef(physfit)[1]
z0.phys <- coef(physfit)[2]
rsq.cond.phys <- (1 - var(residuals(physfit))/var(dats$z.obs))
if (z0.phys > 0.1) {
message<-paste("Warning: Z0 0.1 m or larger",message,sep="  ")
}
}
rsq.cond.phys
z0.phys
vt.phys
imagedat
vt.lin
remove.packages("velocimeter")
# step 0, write R functions
# step 1, run:
devtools::document()
# step 2, run:
devtools::build()
# step 3, run:
devtools::check()
library(velocimeter)
plot.dia <- function(obj){
plot(obj$x,obj$y)
}
obj.test <- data.frame(x=rnorm(5),y=rnorm(5))
plot.dia(obj = obj.test)
?plot
absdiff.veloc <- function(obj) {
absdiff.veloc <- function(obj) {
absdiff.veloc <- function(obj) {
absdiff.veloc <- function(obj) {
x <- obj$imagedat$t
y <- abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))
plot(x,y,
type="b",
xlab="Time",
ylab="Velocity difference")
summary(abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))/diff(obj$imagedat$t))
}
absdiff.veloc <- function(obj) {
y <- abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))
plot(x,y,
type="b",
xlab="Time",
ylab="Velocity difference")
summary(abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))/diff(obj$imagedat$t))
}
load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
absdiff.veloc(obj = vtobj[[1]])
vtobj[[1]]
obj <-  vtobj[[1]]
x <- obj$imagedat$t
y <- abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))
plot(x,y,
type="b",
xlab="Time",
ylab="Velocity difference")
x <- obj$imagedat$t[-1]
y <- abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))
plot(x,y,
type="b",
xlab="Time",
ylab="Velocity difference")
absdiff.veloc <- function(obj) {
x <- obj$imagedat$t[-1]
y <- abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))
plot(x,y,
type="b",
xlab="Time (s)",
ylab="Velocity difference (m/s)")
summary(abs(diff(fitted(obj$physfit))-diff(obj$imagedat$z))/diff(obj$imagedat$t))
}
load(file = paste0(.libPaths()[which("velocimeter"%in%list.files(.libPaths()))],"/velocimeter/extdata/vtobj.Rdata"))
absdiff.veloc(obj = vtobj[[1]])
